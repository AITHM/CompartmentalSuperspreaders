mean(I_inf$vectors[,apply(I_inf$vectors, 2, all)])
all(I_inf$vector[,1])
all(I_inf$vector[,1] >= 0)
I_inf$vectors[,apply(I_inf$vectors >= 0, 2, all)]
I_inf$vectors[,apply(I_inf$vectors <= 0, 2, all)]
I_inf$vectors[,apply(I_inf$vectors >= 0, 2, all)]
I_stable_abs <- lambda*(R_0_max -1)*I_stable_n/(((N_init)/(N_init - 1)*diag(B) - R_0_max*diag(Gamma)%*%ginv(mu*diag(n_strains) + Gamma)%*%H)%*%I_stable_n)
I_stable_n <- I_inf$vectors[,apply(I_inf$vectors >= 0, 2, all)]
# Calculate the absolute magnitude of the endemic infectious population
I_stable_abs <- lambda*(R_0_max -1)*I_stable_n/(((N_init)/(N_init - 1)*diag(B) - R_0_max*diag(Gamma)%*%ginv(mu*diag(n_strains) + Gamma)%*%H)%*%I_stable_n)
I_stable_abs
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
rm(list = ls())
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
I_stable_abs
diag(R_0)
which.max(diag(R_0))
R_0
I_inf$vectors
apply(I_inf$vectors ~= 0, 2, min)
I_inf$vectors[,apply(I_inf$vectors != 0, 2, min)]
apply(I_inf$vectors != 0, 2, min)
I_inf$vectors != 0
apply(which(I_inf$vectors != 0), 2, min)
which(I_inf$vectors!= 0)
apply(I_inf$vectors, 2, which)
S_inf_stable <- min(c(S_inf[S_inf > 0], N_init))
S_inf_stable
N_init <- 10
S_inf_stable <- min(c(S_inf[S_inf > 0], N_init))
S_inf_stable
descendant_seq <- seq(from = dominant_strain, to = n_strains, by = 1)
descendant_seq
## Calculate the generalized next-generation matrix
K_gen <- ginv(B)%*%K%*%B
I_inf <- eigen(K_gen)
## Extract the (normalized) stable solution, i.e. the eigenvector with all positive elements
d_seq <- seq(from = dominant_strain, to = n_strains, by = 1)
K_gen_sub <- K_gen[d_seq,d_seq]
K_gen_sub
d_seq <- seq(from = dominant_strain - 3, to = n_strains, by = 1)
K_gen_sub <- K_gen[d_seq,d_seq]
K_gen_sub
d_seq <- seq(from = dominant_strain + 1, to = n_strains, by = 1)
K_gen[-1,-1]
K_gen[-2,-2]
K_gen
K_gen[-d_seq,-d_seq]
d_seq
d_seq <- seq(from = 1, to = dominant_strain, by = 1)
d_seq
diag(n_strains - dominant_strain)
K_gen_sub <- K_gen[-a_seq,-a_seq] - R_0_max*diag(n_strains - dominant_strain)
a_seq <- seq(from = 1, to = dominant_strain, by = 1)
K_gen_sub <- K_gen[-a_seq,-a_seq] - R_0_max*diag(n_strains - dominant_strain)
a_seq
K_gen_sub
K_gen_vec <- K_gen[-a_seq,dominant_strain]
K_gen_vec
a_seq <- seq(from = 1, to = dominant_strain, by = 1)
K_gen_sub <- K_gen[-a_seq,-a_seq] - R_0_max*diag(n_strains - dominant_strain)
K_gen_vec <- K_gen[-a_seq,dominant_strain]
I_stable_n <- c(repmat(0,a_seq - 1),1,-ginv(K_gen_sub)%*%K_gen_vec)
a_seq <- seq(from = 1, to = dominant_strain, by = 1)
K_gen_sub <- K_gen[-a_seq,-a_seq] - R_0_max*diag(n_strains - dominant_strain)
K_gen_vec <- K_gen[-a_seq,dominant_strain]
I_stable_n <- c(rep(0,a_seq - 1),1,-ginv(K_gen_sub)%*%K_gen_vec)
a_seq
I_stable_n <- c(rep(0,length(a_seq) - 1),1,-ginv(K_gen_sub)%*%K_gen_vec)
ginv(K_gen_sub)
if(dominant_strain < n_strains){
I_stable_n <- c(rep(0,length(a_seq) - 1),1,-ginv(K_gen_sub)%*%K_gen_vec)
} else {
I_stable_n <- c(rep(0,n_strains -1),1)
}
I_stable_n
dominant_strain <- 2
a_seq <- seq(from = 1, to = dominant_strain, by = 1)
K_gen_sub <- K_gen[-a_seq,-a_seq] - R_0_max*diag(n_strains - dominant_strain)
K_gen_vec <- K_gen[-a_seq,dominant_strain]
if(dominant_strain < n_strains){
I_stable_n <- c(rep(0,length(a_seq) - 1),1,-ginv(K_gen_sub)%*%K_gen_vec)
} else {
I_stable_n <- c(rep(0,n_strains -1),1)
}
I_stable_n
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
I_stable_n
I_stable_abs
B <- diag(c(1,20,1,1))
B
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
R_0
S_inf
I_inf_abs
I_stable_abs
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
S_inf
library(lubridate)
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 149 / x * (365 - x)) + 149
258.15/7.25
library("rmarkdown")
library(rmarkdown)
install.packages("installr")
library(installr)
updateR()
0.11 / (0.11 + 0.02)
0.11 / (0.11 + 0.02) * 1/2
2 / 0.4
2 / 0.42
library(rmarkdown)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
setwd("C:\Users/jc213439/Des")
library(lubridate)
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 92/x * (365 - x)) + 92
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 150/x * (365 - x)) + 150
qpois(c(0.025, 0.975), 93/x * (365 - x)) + 93
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 156/x * (365 - x)) + 156
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 95/x * (365 - x)) + 95
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 174/x * (365 - x)) + 174
library(quarto)
library(rmarkdown)
library(markdown)
library(quarto)
quarto_render("C:/InfectiousDiseasesCourse-AITHM/Session_1/Introduction.qmd")
.libPaths()
library(lubridate)
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 177/x*(365-x)) + 177
# Import utils and load required libraries
source("outputs/plot_utils.R")
setwd("C:/Users/jc213439/.julia/dev/CompartmentalSuperspreaders/")
# Import utils and load required libraries
source("outputs/plot_utils.R")
### Data imports ###
data_dir = "data/offspring/"
output_dir = "outputs/offspring/baseline/"   # Edit the final directory to obtain sensitivity results (e.g., baseline -> k3)
# Offspring data
offspring_files = list.files(path=data_dir, pattern ="*.csv")
offspring_datasets = lapply(paste0(data_dir, offspring_files), read.csv)
names(offspring_datasets) = gsub('.{4}$', '', offspring_files)
offspring = bind_rows(offspring_datasets, .id="Dataset")
offspring = cbind(str_split(offspring$Dataset, "_", n=3, simplify=TRUE), offspring)
names(offspring) = c("Pathogen", "Location", "Author", "Dataset", "Z", "n")
offspring$Pathogen = factor(offspring$Pathogen, levels=pathogen_levels)
offspring$Label = relabel_offspring(offspring$Dataset)
# Model predictions
model_fits = read.csv(paste0(output_dir, "model_fit.csv"))
model_fits = cbind(str_split(model_fits$Dataset, "_", n=3, simplify=TRUE), model_fits)
names(model_fits) = c("Pathogen", "Location", "Author", "Dataset", "Model", "Z", "n")
model_fits$Pathogen = factor(model_fits$Pathogen, levels=pathogen_levels)
model_fits$Model = relabel_model(model_fits$Model)
model_fits$Label = relabel_offspring(model_fits$Dataset)
# Model performance
score_summary = read.csv(paste0(output_dir, "score_summary.csv"), stringsAsFactors = TRUE)
score_summary = cbind(str_split(score_summary$Dataset, "_", n=3, simplify=TRUE), score_summary)
names(score_summary)[1:3] = c("Pathogen", "Location", "Author")
score_summary$Label = relabel_offspring(score_summary$Dataset)
score_summary$Model = relabel_model(score_summary$Model)
score_summary$Pathogen = factor(score_summary$Pathogen, levels=pathogen_levels)
# Model parameters
parms_summary = read.csv(paste0(output_dir, "parm_summary.csv"), stringsAsFactors = TRUE)
parms_summary = cbind(str_split(parms_summary$Dataset, "_", n=3, simplify=TRUE), parms_summary)
names(parms_summary)[1:3] = c("Pathogen", "Location", "Author")
parms_summary$Label = relabel_offspring(parms_summary$Dataset)
parms_summary$Model = relabel_model(parms_summary$Model)
parms_summary$Pathogen = factor(parms_summary$Pathogen, levels=pathogen_levels)
# Parameter chains
full_chain = read.csv(paste0(output_dir, "full_chain.csv"))
full_chain = cbind(str_split(full_chain$Dataset, "_", n=3, simplify=TRUE), full_chain)
names(full_chain)[1:3] = c("Pathogen", "Location", "Author")
full_chain$Label = relabel_offspring(full_chain$Dataset)
full_chain$Model = relabel_model(full_chain$Model)
full_chain$Pathogen = factor(full_chain$Pathogen, levels=pathogen_levels)
### Mutate data ###
# Aggregate ≥15 offspring
Z_range = c(0,15)
Zalt_labels = c(seq(0,14), "≥15")
Zalt_ticks = rep("", length(Zalt_labels))
Zalt_ticks[seq(1, length(Zalt_labels), by=5)] = Zalt_labels[seq(1, length(Zalt_labels), by=5)]
offspring$Zalt = factor(cut(offspring$Z, breaks = c(seq(Z_range[1] - 0.5, Z_range[2] - 0.5, by=1), Inf), labels=Zalt_labels), levels=Zalt_labels)
model_fits$Zalt = factor(cut(model_fits$Z, breaks = c(seq(Z_range[1] - 0.5, Z_range[2] - 0.5, by=1), Inf), labels=Zalt_labels), levels=Zalt_labels)
summarize_df = expand.grid(Label = offspring_labels, Zalt = Zalt_labels)
offspring_accum = summarize_df %>%
left_join(offspring, by = c("Label", "Zalt")) %>%
group_by(Label, Zalt, Pathogen) %>%
summarize(count = sum(n), .groups = "drop") %>%
replace_na(list(count = 0))
model_accum = summarize_df %>%
left_join(model_fits, by = c("Label", "Zalt")) %>%
group_by(Model, Label, Zalt, Pathogen) %>%
summarize(count = sum(n), .groups = "drop") %>%
replace_na(list(count = 0)) %>%
filter(Model %in% c("Negative Binomial", "Two-type", "Clinical"))
max.offspring = offspring %>%
group_by(Dataset) %>%
summarize(Max.n = max(n))
score_text = score_summary %>%
arrange(Dataset, Model) %>%
filter(Model %in% c("Negative Binomial", "Two-type", "Clinical")) %>%
mutate(n = as.vector(sapply(max.offspring$Max.n, function(x) x * c(0.9, 0.7, 0.5))),
wr = paste0("w = ", round(w, 2)),
aiccs = paste0("AICc = ", signif(AICc, 4)))
score_text$Zalt = 10.5
ggplot(model_accum, aes(x=Zalt)) +
geom_bar(data=offspring_accum, aes(weight=count, fill=Pathogen), alpha=1.) +
geom_point(aes(y = count, col=Model, shape=Model), size=3, alpha=0.7) +
geom_line(aes(y = count, group=Model, col=Model, lty=Model), lwd=1, alpha=0.7) +
geom_text(data=score_text, aes(y=n, label=aiccs, col=Model), size=6, family="serif") +
facet_wrap(Label ~ ., scales="free") +
xlab("Secondary cases (Z)") +
ylab("Frequency") +
scale_x_discrete(labels = Zalt_ticks) +
scale_y_continuous(label=scales::comma) +
custom_theme +
scale_fill_pathogen() +
scale_col_model() +
scale_shape_model() +
guides(fill = guide_legend(nrow=4),
col = guide_legend(nrow=3))
ggsave(paste0(output_dir, "offspring_fits.png"), dpi=600, width=14, height=14)
## Plot R for each model * dataset ##
parms_summary %>%
filter(Parameter=="R", Model %in% c("Negative Binomial", "Two-type", "Clinical")) %>%
ggplot(aes(x = Label, col=Pathogen, shape=Model)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.75), size=3) +
geom_hline(yintercept = 1, lty=2, lwd=1) +
xlab("") +
ylab("Reproductive number (R)") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = c(0.2,0.65)) +
scale_col_pathogen() +
scale_shape_model() +
guides(col = guide_legend(nrow=4))
ggsave(paste0(output_dir, "R_estimates.png"), dpi=600, width=12, height=7.5)
### Dispersion parameter ###
parms_summary %>%
filter(Parameter=="α") %>%
ggplot(aes(x = Label, col=Pathogen, shape=Model)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.75), size=3) +
xlab("") +
ylab(expression(Dispersion~(k[NB]))) +
# ylab(Tex("Dispersion parameter, $k_{NB}$")) +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1)) +
scale_y_continuous(trans="log10", breaks = c(0.01, 0.05, 0.1, 0.5, 1., 5.)) +
# scale_y_log10(
#   # breaks = c(0.01, 0.03, 0.1, 0.3, 1., 3.),
#   breaks = scales::trans_breaks("log10", function(x) 10^x),
#   labels = scales::trans_format("log10", scales::math_format(10^.x))
# ) +
# coord_trans(y = "log10") +
annotation_logticks(sides="l") +
scale_col_pathogen() +
scale_shape_model()
ggsave(paste0(output_dir, "k_negbin.png"), dpi=600, width=12, height=7.5)
### Superspreader fraction + relative transmissibility ###
parms_summary %>%
filter(Parameter %in% c("c", "ρ"), Model %in% c("Two-type")) %>%
ggplot(aes(x = Label, col=Pathogen)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.5), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.5), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.5), size=3) +
# facet_grid(Parameter ~ .) +
xlab("") +
ylab("") +
ylab("Superspreader fraction (c)\nRelative transmissibility (ρ)") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = "bottom") +
# scale_y_continuous(trans="log10") +
scale_y_continuous(labels=scales::percent) +
scale_col_pathogen() +
guides(col = guide_legend(nrow=4))
ggsave(paste0(output_dir, "c_rho.png"), dpi=600, width=12, height=7.5)
parms_summary %>%
filter(Parameter %in% c("σ"), Model %in% c("Two-type")) %>%
ggplot(aes(x = Label, col=Pathogen)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.5), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.5), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.5), size=3) +
xlab("") +
ylab("") +
ylab("Relative transmissibility (σ)") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = "right") +
scale_y_continuous(labels=scales::percent) +
scale_col_pathogen()
ggsave(paste0(output_dir, "sigma.png"), dpi=600, width=12, height=7.5)
#### Derived parameters ####
### Extinction probability
full_chain %>%
filter(Model %in% c("Negative Binomial", "Two-type", "Clinical")) %>%
group_by(Label, Pathogen, Model) %>%
summarize(lower025 = quantile(q, 0.025),
lower25 = quantile(q, 0.25),
median = median(q),
upper75 = quantile(q, 0.75),
upper975 = quantile(q, 0.975)) %>%
ggplot(aes(x = Label, col=Pathogen, shape=Model)) +
geom_point(aes(y=median), position=position_dodge2(width=0.75), size=3) +
geom_linerange(aes(ymin = lower025, ymax=upper975), position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = lower25, ymax=upper975), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_hline(yintercept=0.20923955891032855, lty=2) +
annotate("text", x=5, y=0.17, size=6, label="Homogeneous limit", family="serif") +
xlab("") +
ylab("Extinction probability (q)") +
scale_y_continuous(labels=scales::percent, limits = c(0,1), breaks = seq(0,1,0.1)) +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = "right") +
scale_col_pathogen() +
scale_shape_model()
ggsave(paste0(output_dir, "q_estimates.png"), dpi=600, width=12, height=7.5)
#### Scores ####
## Plot score by model for each dataset ##
ggplot(score_summary, aes(x=Model, col=Pathogen, shape=Model)) +
geom_point(aes(y=w), size=4) +
facet_wrap(Label ~ ., nrow=5) +
xlab("Model") +
ylab("Akaike weight (w)") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position="right") +
scale_shape_model() +
scale_col_pathogen()
ggsave(paste0(output_dir, "all_scores.png"), dpi=600, height=12, width=16)
#### Tables ####
### Score table
# number_sigificant = 4
score_table = score_summary %>% dplyr::select(Pathogen, Location, n_obs, Model, ℓₘₐₓ, BIC, AIC, AICc, w)
# score_table = score_table %>% mutate_at(vars(BIC, AIC, AICc, w), funs(signif(., 4)))
# score_table = max_bold(score_table, "w")
score_table = remove_duplicates(score_table, "n_obs")
?remove_duplicates
??remove_duplicates
covid_table = score_table %>% dplyr::filter(Pathogen == "SARS-CoV-2")
make_output_table(covid_table, "Scores_table_covid.tex", "rllrcrrrrr", c(0,0,0,0,0,1,1,1,1,3))
#### Tables ####
### Score table
score_table = score_summary %>%
dplyr::select(Pathogen, Location, n_obs, Model, ℓₘₐₓ, BIC, AIC, AICc, w) %>%
xtable(include.rownames=FALSE)
score_table
# Model performance
score_summary = read.csv(paste0(output_dir, "score_summary.csv"), stringsAsFactors = TRUE)
head(score_summary)
score_summary = cbind(str_split(score_summary$Dataset, "_", n=3, simplify=TRUE), score_summary)
head(score_summary)
read_output = function(output){
out = read.csv(paste0(output_dir, output, ".csv"))
out = cbind(str_split(out$Dataset, "_", n=3, simplify=TRUE), out)
names(out)[1:5] = c("Pathogen", "Location", "Author", "Dataset", "Model")
out$Pathogen = factor(out$Pathogen, levels=pathogen_levels)
out$Model = relabel_model(out$Model)
return(out)
}
out = read_output("model_fit")
head(out)
out = read_output("score_summary")
head(out)
out = read_output("parms_summary")
out = read_output("parm_summary")
head(out)
out = read_output("full_chain")
head(out)
rm(list=ls())
# Import utils and load required libraries
source("outputs/plot_utils.R")
### Data imports ###
data_dir = "data/offspring/"
output_dir = "outputs/offspring/baseline/"   # Edit the final directory to obtain sensitivity results (e.g., baseline -> k3)
read_output = function(output){
out = read.csv(paste0(output_dir, output, ".csv"))
out = cbind(str_split(out$Dataset, "_", n=3, simplify=TRUE), out)
names(out)[1:5] = c("Pathogen", "Location", "Author", "Dataset", "Model")
out$Pathogen = factor(out$Pathogen, levels=pathogen_levels)
out$Model = relabel_model(out$Model)
out$Label = relabel_offspring(out$Dataset)
return(out)
}
# Offspring data
offspring_files = list.files(path=data_dir, pattern ="*.csv")
offspring_datasets = lapply(paste0(data_dir, offspring_files), read.csv)
names(offspring_datasets) = gsub('.{4}$', '', offspring_files)
offspring = bind_rows(offspring_datasets, .id="Dataset")
offspring = cbind(str_split(offspring$Dataset, "_", n=3, simplify=TRUE), offspring)
names(offspring) = c("Pathogen", "Location", "Author", "Dataset", "Z", "n")
offspring$Pathogen = factor(offspring$Pathogen, levels=pathogen_levels)
offspring$Label = relabel_offspring(offspring$Dataset)
# Model predictions
model_fits = read_output("model_fit")
# Model performance
score_summary = read_output("score_summary")
# Model parameters
parms_summary = read_output("parm_summary")
# Parameter chains
full_chain = read_output("full_chain")
### Mutate data ###
# Aggregate ≥15 offspring
Z_range = c(0,15)
Zalt_labels = c(seq(0,14), "≥15")
Zalt_ticks = rep("", length(Zalt_labels))
Zalt_ticks[seq(1, length(Zalt_labels), by=5)] = Zalt_labels[seq(1, length(Zalt_labels), by=5)]
offspring$Zalt = factor(cut(offspring$Z, breaks = c(seq(Z_range[1] - 0.5, Z_range[2] - 0.5, by=1), Inf), labels=Zalt_labels), levels=Zalt_labels)
model_fits$Zalt = factor(cut(model_fits$Z, breaks = c(seq(Z_range[1] - 0.5, Z_range[2] - 0.5, by=1), Inf), labels=Zalt_labels), levels=Zalt_labels)
summarize_df = expand.grid(Label = offspring_labels, Zalt = Zalt_labels)
offspring_accum = summarize_df %>%
left_join(offspring, by = c("Label", "Zalt")) %>%
group_by(Label, Zalt, Pathogen) %>%
summarize(count = sum(n), .groups = "drop") %>%
replace_na(list(count = 0))
model_accum = summarize_df %>%
left_join(model_fits, by = c("Label", "Zalt")) %>%
group_by(Model, Label, Zalt, Pathogen) %>%
summarize(count = sum(n), .groups = "drop") %>%
replace_na(list(count = 0)) %>%
filter(Model %in% c("Negative Binomial", "Two-type", "Clinical"))
max.offspring = offspring %>%
group_by(Dataset) %>%
summarize(Max.n = max(n))
score_text = score_summary %>%
arrange(Dataset, Model) %>%
filter(Model %in% c("Negative Binomial", "Two-type", "Clinical")) %>%
mutate(n = as.vector(sapply(max.offspring$Max.n, function(x) x * c(0.9, 0.7, 0.5))),
wr = paste0("w = ", round(w, 2)),
aiccs = paste0("AICc = ", signif(AICc, 4)))
score_text$Zalt = 10.5
ggplot(model_accum, aes(x=Zalt)) +
geom_bar(data=offspring_accum, aes(weight=count, fill=Pathogen), alpha=1.) +
geom_point(aes(y = count, col=Model, shape=Model), size=3, alpha=0.7) +
geom_line(aes(y = count, group=Model, col=Model, lty=Model), lwd=1, alpha=0.7) +
geom_text(data=score_text, aes(y=n, label=aiccs, col=Model), size=6, family="serif") +
facet_wrap(Label ~ ., scales="free") +
xlab("Secondary cases (Z)") +
ylab("Frequency") +
scale_x_discrete(labels = Zalt_ticks) +
scale_y_continuous(label=scales::comma) +
custom_theme +
scale_fill_pathogen() +
scale_col_model() +
scale_shape_model() +
guides(fill = guide_legend(nrow=4),
col = guide_legend(nrow=3))
read_input = function(dir){
files = list.files(path=dir, pattern ="*.csv")
input =  lapply(paste0(dir, files), read.csv)
names(input) = gsub('.{4}', '', files)
input = bind_rows(input, .id="Dataset")
input = cbind(str_split(input$Dataset, "_", n=3, simplify=TRUE), input)
names(input) = c("Pathogen", "Location", "Author", "Dataset", "Z", "n")
input$Pathogen = factor(input$Pathogen, levels=pathogen_levels)
input$Label = relabel_offspring(input$Dataset)
return(input)
}
# Offspring data
offspring = read_input(dir)
# Offspring data
offspring = read_input(data_dir)
files = list.files(path=dir, pattern ="*.csv")
dir = data_dir
dir
files = list.files(path=dir, pattern ="*.csv")
file
files
input =  lapply(paste0(dir, files), read.csv)
input
names(input) = gsub('.{4}', '', files)
input
files
gsub('.{4}', '', files)
offspring_files = list.files(path=data_dir, pattern ="*.csv")
offspring_datasets = lapply(paste0(data_dir, offspring_files), read.csv)
gsub('.{4}$', '', offspring_files)
offspring_files
files
gsub('.{4}$', '', offspring_files)
gsub('.{4}', '', files)
typeof(files)
typeof(offspring_files)
files == offspring_files
class(files) == class(offspring_files)
gsub('.{4}$', '', files)
files = list.files(path=dir, pattern ="*.csv")
input =  lapply(paste0(dir, files), read.csv)
names(input) = gsub('.{4}$', '', files)
input = bind_rows(input, .id="Dataset")
input = cbind(str_split(input$Dataset, "_", n=3, simplify=TRUE), input)
input
names(input) = c("Pathogen", "Location", "Author", "Dataset", "Z", "n")
input$Pathogen = factor(input$Pathogen, levels=pathogen_levels)
input$Label = relabel_offspring(input$Dataset)
head(input)
read_input = function(dir){
files = list.files(path=dir, pattern ="*.csv")
input =  lapply(paste0(dir, files), read.csv)
names(input) = gsub('.{4}$', '', files)
input = bind_rows(input, .id="Dataset")
input = cbind(str_split(input$Dataset, "_", n=3, simplify=TRUE), input)
names(input) = c("Pathogen", "Location", "Author", "Dataset", "Z", "n")
input$Pathogen = factor(input$Pathogen, levels=pathogen_levels)
input$Label = relabel_offspring(input$Dataset)
return(input)
}
# Offspring data
offspring = read_input(data_dir)
data_dir
