knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
set.seed(121432)
x <- runif(100, 0, 100)
y <- 3*x + 15 + rnorm(length(x), sd = 7)
plot(x, y)
likelihood <- function(par){
y_predicted <- par[1] * x + par[2]
single_likelihoods <- dnorm(y, mean = y_predicted, sd = par[3], log = T)
return(sum(single_likelihoods))
}
prior <- function(par){
prior_slope <- dnorm(par[1], mean = 3, sd = 10, log = T)
prior_intercept <- dnorm(par[2], mean = 15, sd = 10, log = T)
prior_error <- dnorm(par[3], mean = 10, sd = 10, log = T)
return(prior_slope+prior_intercept+prior_error)
}
proposal_function <- function(par){
slope_proposal <- par[1] + rnorm(1, mean = 0, sd = 1)
intercept_proposal <- par[2] + rnorm(1, mean = 0, sd = 1)
error_proposal <- abs(par[3] + rnorm(1, mean = 0, sd = 1))
return(c(slope_proposal, intercept_proposal, error_proposal))
}
start_values <- c(1, 1, 1)
iterations <- 100000
run_mcmc <- function(start_values, iterations, sample_from_prior = F){
chain <- matrix(NA, iterations, 6)
prior_start <- prior(start_values)
likelihood_start <- likelihood(start_values)
if(sample_from_prior) likelihood_start <- 0
posterior_start <- prior_start+likelihood_start
chain[1, ] <- c(prior_start, likelihood_start, posterior_start, start_values)
colnames(chain) <- c('prior', 'likelihood', 'posterior', 'slope', 'intercept','error')
for(i in 2:iterations){
proposal <- proposal_function(chain[i-1, 4:6])
prior_temp <- prior(proposal)
likelihood_temp <- likelihood(proposal)
if(sample_from_prior) likelihood_temp <- 0
posterior_temp <- prior_temp + likelihood_temp
mh_ratio <- exp(posterior_temp - chain[i-1, 'posterior'])
if(mh_ratio > 1){ # Accept if the new proposal has a higher posterior than the previous step
chain[i, ] <- c(prior_temp, likelihood_temp, posterior_temp, proposal)
}else if(mh_ratio > runif(1)){ # Accept if the new proposal has a higher posterior than a random number from a uniform distribuiton
chain[i, ] <- c(prior_temp, likelihood_temp, posterior_temp, proposal)
}else{ # Reject proposal and return to previous step.
chain[i, ] <- chain[i-1, ]
}
}
return(chain)
}
plot_mcmc <- function(chain, burnin, use_heat_colors = T, col_line = rgb(0, 0, 0, 0.5)){
ml_fit <- summary(lm(y ~ x))
ml_estimates <- ml_fit$coefficients[, 'Estimate']
samples <- (1:nrow(chain))[-c(1:burnin)]
par(mfrow = c(3, 3))
plot(chain[-c(1:burnin), 'slope'], type = 'l', xlab = 'step', ylab = 'Slope')
lines( samples, rep(ml_estimates[2], length(samples)), col = 'red', lwd = 2)
plot(chain[-c(1:burnin), 'intercept'], type = 'l', xlab = 'step', ylab = 'Intercept')
lines( samples, rep(ml_estimates[1], length(samples)), col = 'red', lwd = 2)
plot(chain[-c(1:burnin), 'error'], type = 'l', xlab = 'step', ylab = 'Error')
hist(chain[-c(1:burnin), 'slope'], xlab = 'Slope', main = '')
lines(x = rep(ml_estimates[2], 2), y = c(0, 10000), col = 'red', lwd = 3)
hist(chain[-c(1:burnin), 'intercept'], xlab = 'Intercept', main = '')
lines(x = rep(ml_estimates[1], 2), y = c(0, 10000), col = 'red', lwd = 3)
hist(chain[-c(1:burnin), 'error'], xlab = 'Error', main = '')
cols <-  rev( heat.colors(nrow(chain), alpha = 1.0))
if(use_heat_colors){
plot(chain[order(chain[,'posterior'],decreasing =F),
c('slope', 'intercept')],pch = 20, type = 'b', col = cols)#0, 0, 0.2))
}else{
plot(chain[order(chain[,'posterior'],decreasing =F),
c('slope', 'intercept')],pch = 20, type = 'l', col = rgb(0, 0, 0, 0.5))
}
plot(x, y)
for(i in 1:length(samples)){
abline(b =  mean( chain[samples[i], 'slope']),
a = mean( chain[samples[i], 'intercept']),col = rgb(1, 0, 0, 0.2), lwd = 0.5)
}
}
chain <- run_mcmc(start_values = c(1, 1, 1), iterations = 100, sample_from_prior = F)
plot_mcmc(chain, 10, use_heat_colors = F)
chain <- run_mcmc(start_values = c(1, 1, 1), iterations = 50000, sample_from_prior = F)
plot_mcmc(chain, 5000, use_heat_colors = F)
View(likelihood)
proposal_function <- function(par){
slope_proposal <- par[1] + rnorm(1, mean = 0, sd = 10)
intercept_proposal <- par[2] + rnorm(1, mean = 0, sd = 10)
error_proposal <- abs(par[3] + rnorm(1, mean = 0, sd = 10))
return(c(slope_proposal, intercept_proposal, error_proposal))
}
chain <- run_mcmc(start_values = c(1, 1, 1), iterations = 50000, sample_from_prior = F)
plot_mcmc(chain, 5000, use_heat_colors = F)
proposal_function <- function(par){
slope_proposal <- par[1] + rnorm(1, mean = 0, sd = 1)
intercept_proposal <- par[2] + rnorm(1, mean = 0, sd = 1)
error_proposal <- abs(par[3] + rnorm(1, mean = 0, sd = 1))
return(c(slope_proposal, intercept_proposal, error_proposal))
}
proposal_function <- function(par){
slope_proposal <- par[1] + rnorm(1, mean = 0, sd = 1)
intercept_proposal <- par[2] + rnorm(1, mean = 0, sd = 1)
error_proposal <- abs(par[3] + rnorm(1, mean = 0, sd = 1))
return(c(slope_proposal, intercept_proposal, error_proposal))
}
prior <- function(par){
prior_slope <- dnorm(par[1], mean = 10, sd = 0.01, log = T)
prior_intercept <- dnorm(par[2], mean = 1, sd = 0.01, log = T)
prior_error <- dnorm(par[3], mean = 10, sd = 10, log = T)
return(prior_slope+prior_intercept+prior_error)
}
chain <- run_mcmc(start_values = c(1, 1, 1), iterations = 50000, sample_from_prior = F)
plot_mcmc(chain, 5000, use_heat_colors = F, col_line = 0.1)
prior <- function(par){
prior_slope <- dunif(par[1], min = -100, max = 100,log = T)
prior_intercept <- dunif(par[2], min = -100, max = 100, log = T)
prior_error <- dunif(par[3], min = -100, max = 100, log = T)
return(prior_slope+prior_intercept+prior_error)
}
chain <- run_mcmc(start_values = c(1, 1, 1), iterations = 100000, sample_from_prior = F)
plot_mcmc(chain, 5000, use_heat_colors = F, col_line = 0.1)
chain <- run_mcmc(start_values = c(1, 1, 1), iterations = 150000, sample_from_prior = T)
plot_mcmc(chain, 5000, use_heat_colors = F, col_line = 0.1)
prior <- function(par){
prior_slope <- dnorm(par[1], mean = 3, sd = 10, log = T)
prior_intercept <- dnorm(par[2], mean = 15, sd = 10, log = T)
prior_error <- dnorm(par[3], mean = 10, sd = 10, log = T)
return(prior_slope+prior_intercept+prior_error)
}
chain <- run_mcmc(start_values = c(1, 1, 1), iterations = 150000, sample_from_prior = T)
plot_mcmc(chain, 5000, use_heat_colors = F, col_line = 0.1)
View(prior)
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
which(I_inf$vectors > 0)
which(I_inf$vectors[,] > 0)
which(I_inf$vectors[,c(1:n_strains)] > 0)
I_inf$vectors
I_inf$vectors[,c(1:n_strains) >= 0]
which(I_inf$vectors[,c(1:n_strains) >= 0])
which(I_inf$vectors[,c(1:n_strains)] >= 0)
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
I_inf$vectors
all(I_inf$vectors[,1] >= 0)
all(I_inf$vectors[,2] >= 0)
all(I_inf$vectors[,3] >= 0)
all(I_inf$vectors[,4] >= 0)
apply(I_inf$vectors, 2, all(x) >= 0)
apply(I_inf$vectors, 2, all(I_inf$vectors) >= 0)
apply(I_inf$vectors, 2, mean)
apply(I_inf$vectors, 2, all(I_inf$vectors))
apply(I_inf$vectors, 2, all
)
apply(I_inf$vectors, 1, all)
sign_test <- function(m) {list(c(all(m) >= 0))}
sign_test(1)
sign_test(1)
sign_test(-1)
sign_test <- function(m) {list((all(m) >= 0))}
sign_test(1)
sign_test(-1)
all(I_inf$vectors >= 0)
all(I_inf$vectors[,c(1:n_strains)] >= 0)
sign_test <- function(m) {((all(m) >= 0))}
sign_test(1)
sign_test(-1)
apply(I_inf$vectors, 2, all)
I_inf$vectors[,apply(I_inf$vectors, 2, all)]
I_inf$vectors
I_inf$vectors[,apply(I_inf$vectors, 1, all)]
I_inf$vectors[,apply(I_inf$vectors, 2, all)]
I_inf$vectors[,sapply(I_inf$vectors, 2, all)]
I_inf$vectors[,sapply(I_inf$vectors, all)]
I_inf$vectors[,lapply(I_inf$vectors, 2, all)]
I_inf$vectors[,apply(I_inf$vectors, 2, all)]
mean(I_inf$vectors[,apply(I_inf$vectors, 2, all)])
all(I_inf$vector[,1])
all(I_inf$vector[,1] >= 0)
I_inf$vectors[,apply(I_inf$vectors >= 0, 2, all)]
I_inf$vectors[,apply(I_inf$vectors <= 0, 2, all)]
I_inf$vectors[,apply(I_inf$vectors >= 0, 2, all)]
I_stable_abs <- lambda*(R_0_max -1)*I_stable_n/(((N_init)/(N_init - 1)*diag(B) - R_0_max*diag(Gamma)%*%ginv(mu*diag(n_strains) + Gamma)%*%H)%*%I_stable_n)
I_stable_n <- I_inf$vectors[,apply(I_inf$vectors >= 0, 2, all)]
# Calculate the absolute magnitude of the endemic infectious population
I_stable_abs <- lambda*(R_0_max -1)*I_stable_n/(((N_init)/(N_init - 1)*diag(B) - R_0_max*diag(Gamma)%*%ginv(mu*diag(n_strains) + Gamma)%*%H)%*%I_stable_n)
I_stable_abs
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
rm(list = ls())
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
I_stable_abs
diag(R_0)
which.max(diag(R_0))
R_0
I_inf$vectors
apply(I_inf$vectors ~= 0, 2, min)
I_inf$vectors[,apply(I_inf$vectors != 0, 2, min)]
apply(I_inf$vectors != 0, 2, min)
I_inf$vectors != 0
apply(which(I_inf$vectors != 0), 2, min)
which(I_inf$vectors!= 0)
apply(I_inf$vectors, 2, which)
S_inf_stable <- min(c(S_inf[S_inf > 0], N_init))
S_inf_stable
N_init <- 10
S_inf_stable <- min(c(S_inf[S_inf > 0], N_init))
S_inf_stable
descendant_seq <- seq(from = dominant_strain, to = n_strains, by = 1)
descendant_seq
## Calculate the generalized next-generation matrix
K_gen <- ginv(B)%*%K%*%B
I_inf <- eigen(K_gen)
## Extract the (normalized) stable solution, i.e. the eigenvector with all positive elements
d_seq <- seq(from = dominant_strain, to = n_strains, by = 1)
K_gen_sub <- K_gen[d_seq,d_seq]
K_gen_sub
d_seq <- seq(from = dominant_strain - 3, to = n_strains, by = 1)
K_gen_sub <- K_gen[d_seq,d_seq]
K_gen_sub
d_seq <- seq(from = dominant_strain + 1, to = n_strains, by = 1)
K_gen[-1,-1]
K_gen[-2,-2]
K_gen
K_gen[-d_seq,-d_seq]
d_seq
d_seq <- seq(from = 1, to = dominant_strain, by = 1)
d_seq
diag(n_strains - dominant_strain)
K_gen_sub <- K_gen[-a_seq,-a_seq] - R_0_max*diag(n_strains - dominant_strain)
a_seq <- seq(from = 1, to = dominant_strain, by = 1)
K_gen_sub <- K_gen[-a_seq,-a_seq] - R_0_max*diag(n_strains - dominant_strain)
a_seq
K_gen_sub
K_gen_vec <- K_gen[-a_seq,dominant_strain]
K_gen_vec
a_seq <- seq(from = 1, to = dominant_strain, by = 1)
K_gen_sub <- K_gen[-a_seq,-a_seq] - R_0_max*diag(n_strains - dominant_strain)
K_gen_vec <- K_gen[-a_seq,dominant_strain]
I_stable_n <- c(repmat(0,a_seq - 1),1,-ginv(K_gen_sub)%*%K_gen_vec)
a_seq <- seq(from = 1, to = dominant_strain, by = 1)
K_gen_sub <- K_gen[-a_seq,-a_seq] - R_0_max*diag(n_strains - dominant_strain)
K_gen_vec <- K_gen[-a_seq,dominant_strain]
I_stable_n <- c(rep(0,a_seq - 1),1,-ginv(K_gen_sub)%*%K_gen_vec)
a_seq
I_stable_n <- c(rep(0,length(a_seq) - 1),1,-ginv(K_gen_sub)%*%K_gen_vec)
ginv(K_gen_sub)
if(dominant_strain < n_strains){
I_stable_n <- c(rep(0,length(a_seq) - 1),1,-ginv(K_gen_sub)%*%K_gen_vec)
} else {
I_stable_n <- c(rep(0,n_strains -1),1)
}
I_stable_n
dominant_strain <- 2
a_seq <- seq(from = 1, to = dominant_strain, by = 1)
K_gen_sub <- K_gen[-a_seq,-a_seq] - R_0_max*diag(n_strains - dominant_strain)
K_gen_vec <- K_gen[-a_seq,dominant_strain]
if(dominant_strain < n_strains){
I_stable_n <- c(rep(0,length(a_seq) - 1),1,-ginv(K_gen_sub)%*%K_gen_vec)
} else {
I_stable_n <- c(rep(0,n_strains -1),1)
}
I_stable_n
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
I_stable_n
I_stable_abs
B <- diag(c(1,20,1,1))
B
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
R_0
S_inf
I_inf_abs
I_stable_abs
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
source('C:/Users/jc213439/Dropbox/Coupled multi-strain model/R programs/SIR_n_strains.R')
S_inf
library(lubridate)
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 149 / x * (365 - x)) + 149
258.15/7.25
library("rmarkdown")
library(rmarkdown)
install.packages("installr")
library(installr)
updateR()
0.11 / (0.11 + 0.02)
0.11 / (0.11 + 0.02) * 1/2
2 / 0.4
2 / 0.42
library(rmarkdown)
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
setwd("C:\Users/jc213439/Des")
library(lubridate)
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 92/x * (365 - x)) + 92
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 150/x * (365 - x)) + 150
qpois(c(0.025, 0.975), 93/x * (365 - x)) + 93
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 156/x * (365 - x)) + 156
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 95/x * (365 - x)) + 95
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 174/x * (365 - x)) + 174
library(quarto)
library(rmarkdown)
library(markdown)
library(quarto)
quarto_render("C:/InfectiousDiseasesCourse-AITHM/Session_1/Introduction.qmd")
.libPaths()
library(lubridate)
(x = yday(Sys.Date()))
qpois(c(0.025, 0.975), 177/x*(365-x)) + 177
# Import utils and load required libraries
source("outputs/plot_utils.R")
setwd("C:/Users/jc213439/.julia/dev/CompartmentalSuperspreaders/")
# Import utils and load required libraries
source("outputs/plot_utils.R")
### Data imports ###
data_dir = "data/offspring/"
output_dir = "outputs/offspring/baseline/"   # Edit the final directory to obtain sensitivity results (e.g., baseline -> k3)
# Offspring data
offspring = read_input(data_dir)
# Model predictions
model_fits = read_output("model_fit")
# Model performance
score_summary = read_output("score_summary")
score_summary = append_ΔAICc(score_summary %>% filter(Model != "Zero-inflated"))
# Model parameters
parms_summary = read_output("parm_summary")
# Parameter chains
full_chain = read_output("full_chain")
plot_fit(offspring, model_fits, score_summary, models=c("Negative Binomial", "Two-type"))  +
guides(fill = guide_legend(nrow=4),
col = guide_legend(nrow=2))
ggsave(paste0(output_dir, "offspring_fits.png"), dpi=600, width=14, height=14)
plot_parameter(parms_summary, "R", ylabel="Reproductive number (R)", models=all_models) +
geom_hline(yintercept = 1, lty=2, lwd=1) +
guides(col = guide_legend(nrow=4))
ggsave(paste0(output_dir, "R_estimates.png"), dpi=600, width=12, height=7.5)
plot_parameter(parms_summary, "α", ylabel=expression(Dispersion~(k[NB])), models=c("Negative Binomial")) +
scale_y_continuous(trans="log10", breaks = c(0.01, 0.05, 0.1, 0.5, 1., 5.)) +
annotation_logticks(sides="l") +
theme(legend.position="bottom")
plot_parameter(parms_summary, "α", ylabel=expression(Dispersion~(k[NB])), models=c("Negative Binomial")) +
scale_y_continuous(trans="log10", breaks = c(0.01, 0.05, 0.1, 0.5, 1., 5.)) +
annotation_logticks(sides="l") +
theme(legend.position="right")
ggsave(paste0(output_dir, "k_negbin.png"), dpi=600, width=12, height=7.5)
plot_parameter(parms_summary, c("c", "ρ"), ylabel="Superspreader fraction (c)\nRelative transmissibility (ρ)", models=c("Two-type")) +
guides(col = guide_legend(nrow=4))
ggplot(parms_summary %>% filter(Parameters %in% c("c", "ρ")), aes(x=Label, col=Pathogen, shape=Model)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.75), size=3) +
facet_grid(Parameter ~ .) +
xlab("") +
ylab("Relative transmissibility") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = c(0.2,0.65)) +
scale_col_pathogen() +
scale_shape_model()
ggplot(parms_summary %>% filter(Parameter %in% c("c", "ρ")), aes(x=Label, col=Pathogen, shape=Model)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.75), size=3) +
facet_grid(Parameter ~ .) +
xlab("") +
ylab("Relative transmissibility") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = c(0.2,0.65)) +
scale_col_pathogen() +
scale_shape_model()
ggplot(parms_summary %>% filter(Parameter %in% c("c", "ρ"), Model %in% c("Two-type", "SEIR(2)", "Single-type", "SEIR(1)")), aes(x=Label, col=Pathogen, shape=Model)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.75), size=3) +
facet_grid(Parameter ~ .) +
xlab("") +
ylab("Relative transmissibility") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = c(0.2,0.65)) +
scale_col_pathogen() +
scale_shape_model() +
theme(legend.position = "bottom")
ggplot(parms_summary %>% filter(Parameter %in% c("c", "ρ"), Model %in% c("Two-type", "SEIR(2)", "Single-type", "SEIR(1)")), aes(x=Label, col=Pathogen, shape=Model)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.75), size=3) +
facet_grid(Parameter ~ .) +
xlab("") +
ylab("Relative transmissibility") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = c(0.2,0.65)) +
scale_col_pathogen() +
scale_shape_model() +
theme(legend.position = "right")
ggsave(paste0(output_dir, "c_rho.png"), dpi=600, width=12, height=7.5)
plot_parameter(parms_summary, "σ", ylabel="Relative transmissibility (σ)", models=c("Two-type", "Single-type")) +
theme(legend.position = "right")
ggplot(parms_summary %>% filter(Parameter %in% c("c", "ρ"), Model %in% c("Two-type", "SEIR(2)", "Single-type", "SEIR(1)")), aes(x=Label, col=Pathogen, shape=Model)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.75), size=3) +
facet_grid(Parameter ~ ., labeller=labeller(Parameter = c("Superspreader\nfraction, c", "Relative\ntransmissibility, ρ"))) +
xlab("") +
ylab("Relative transmissibility") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = c(0.2,0.65)) +
scale_col_pathogen() +
scale_shape_model() +
theme(legend.position = "right")
ggplot(parms_summary %>% filter(Parameter %in% c("c", "ρ"), Model %in% c("Two-type", "SEIR(2)", "Single-type", "SEIR(1)")), aes(x=Label, col=Pathogen, shape=Model)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.75), size=3) +
facet_grid(Parameter ~ ., labeller=labeller(Parameter = c(c="Superspreader\nfraction, c", ρ="Relative\ntransmissibility, ρ"))) +
xlab("") +
ylab("Relative transmissibility") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = c(0.2,0.65)) +
scale_col_pathogen() +
scale_shape_model() +
theme(legend.position = "right")
ggplot(parms_summary %>% filter(Parameter %in% c("c", "ρ"), Model %in% c("Two-type", "SEIR(2)", "Single-type", "SEIR(1)")), aes(x=Label, col=Pathogen, shape=Model)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.75), size=3) +
facet_grid(Parameter ~ ., labeller=labeller(Parameter = c(c="Superspreader\nfraction, c", ρ="Relative\ntransmissibility, ρ"))) +
xlab("") +
ylab("") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = c(0.2,0.65)) +
scale_col_pathogen() +
scale_shape_model() +
theme(legend.position = "right")
ggsave(paste0(output_dir, "c_rho.png"), dpi=600, width=12, height=7.5)
plot_parameter(parms_summary, "σ", ylabel="Relative transmissibility (σ)", models=c("Two-type", "Single-type")) +
theme(legend.position = "right")
ggplot(parms_summary %>% filter(Parameter %in% c("c", "ρ"), Model %in% c("Two-type", "SEIR(2)", "Clinical")), aes(x=Label, col=Pathogen, shape=Model)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.75), size=3) +
facet_grid(Parameter ~ ., labeller=labeller(Parameter = c(c="Superspreader\nfraction, c", ρ="Relative\ntransmissibility, ρ"))) +
xlab("") +
ylab("") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = c(0.2,0.65)) +
scale_col_pathogen() +
scale_shape_model() +
theme(legend.position = "right")
ggplot(parms_summary %>% filter(Parameter %in% c("c", "ρ"), Model %in% c("Two-type", "SEIR(2)")), aes(x=Label, col=Pathogen, shape=Model)) +
geom_linerange(aes(ymin = X2.5., ymax=X97.5.),position=position_dodge2(width=0.75), lwd=2, alpha=0.3) +
geom_linerange(aes(ymin = X25., ymax=X75.), position=position_dodge2(width=0.75), lwd=2, alpha=0.6) +
geom_point(aes(y=X50.), position=position_dodge2(width=0.75), size=3) +
facet_grid(Parameter ~ ., labeller=labeller(Parameter = c(c="Superspreader\nfraction, c", ρ="Relative\ntransmissibility, ρ"))) +
xlab("") +
ylab("") +
custom_theme + theme(axis.text.x = element_text(angle = 60, hjust=1), legend.position = c(0.2,0.65)) +
scale_col_pathogen() +
scale_shape_model() +
theme(legend.position = "right")
plot_extinction(full_chain, models=all_models)
ggsave(paste0(output_dir, "q_estimates.png"), dpi=600, width=12, height=7.5)
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)")) %>% select(X50.) %>% range()
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c") %>% select(X50.) %>% range()
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)")) %>% select(X50.) %>% range()
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(X50.) %>% range()
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(X50.) %>% filter(c %in% c(max(c), min(c)))
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(X50.) %>% filter(c %in% c(max("c"), min("c")))
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(X50.) %>% filter(c == max(c))
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(X50.) %>% filter(`c` == max(`c`))
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(X50.) %>% filter("c" == max("c"))
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(X50.) %>% filter("c" == max(c))
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(X50.) %>% filter(c == max("c"))
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(X50.) %>% mutate(frac == c) %>% filter(frac == max(frac))
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(X50.) %>% mutate(frac == "c") %>% filter(frac == max(frac))
frac
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(Label, Model, X50.)
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(Pathogen, Label, Model, X50.)
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "ρ", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(Pathogen, Label, Model, X50.)
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(Pathogen, Label, Model, X975.)
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(Pathogen, Label, Model)
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)"))
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(Pathogen, Label, Model, X97.5.)
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(Pathogen, Label, Model, X97.5.) %>% select(X97.5.) %>% max()
parms_summary %>% filter(Model %in% c("Two-type", "SEIR(2)"), Parameter == "c", Label %notin% c("England, 1966 (n=25)", "Zaire, 1980-84 (n=147)")) %>% select(Pathogen, Label, Model, X2.5.)
score_summary %>% filter(Model != "Zero-inflated") %>% group_by(Label) %>% filter(AICc = min(AICc)) %>% select(Pathogen, Label, Model, AICc, ΔAICc)
score_summary %>% filter(Model != "Zero-inflated") %>% group_by(Label) %>% filter(AICc == min(AICc)) %>% select(Pathogen, Label, Model, AICc, ΔAICc)
plot_score(score_summary, models=all_models)
### k=2 ####
# Model predictions
sensk2_fits = read_output("model_fit", output_dir = "./outputs/offspring/k2/")
# Model performance
sensk2_scores = read_output("score_summary", output_dir = "./outputs/offspring/k2/")
sensk2_score %>% filter(Model != "Zero-inflated") %>% group_by(Label) %>% filter(AICc = min(AICc)) %>% select(Pathogen, Label, Model, AICc, ΔAICc)
sensk2_scores %>% filter(Model != "Zero-inflated") %>% group_by(Label) %>% filter(AICc = min(AICc)) %>% select(Pathogen, Label, Model, AICc, ΔAICc)
sensk2_scores %>% filter(Model != "Zero-inflated") %>% group_by(Label) %>% filter(AICc == min(AICc)) %>% select(Pathogen, Label, Model, AICc, ΔAICc)
sensk2_scores %>% filter(Model != "Zero-inflated") %>% group_by(Label) %>% filter(AICc == min(AICc)) %>% select(Pathogen, Label, Model, AICc)
sensk2_scores = append_ΔAICc(sensk2_scores)
sensk2_scores %>% filter(Model != "Zero-inflated") %>% group_by(Label) %>% filter(AICc == min(AICc)) %>% select(Pathogen, Label, Model, AICc)
sensk2_scores %>% filter(Model != "Zero-inflated") %>% group_by(Label) %>% filter(AICc == min(AICc)) %>% select(Pathogen, Label, Model, AICc, ΔAICc)
sensk2_scores %>% filter(Model != "Zero-inflated") %>% filter(Model != "Negative Binomial") %>% group_by(Label) %>% filter(AICc == min(AICc)) %>% select(Pathogen, Label, Model, AICc, ΔAICc)
# Model performance
sensk3_scores = read_output("score_summary", output_dir = "./outputs/offspring/k3/")
sensk3_scores = append_ΔAICc(sensk3_scores %>% filter(Model != "Zero-inflated"))
sensk3_scores %>% filter(Model != "Zero-inflated") %>% filter(Model != "Negative Binomial") %>% group_by(Label) %>% filter(AICc == min(AICc)) %>% select(Pathogen, Label, Model, AICc, ΔAICc)
# Check sensitivity of parameter estimates
parms_summary$k = 1
